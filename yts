#! /usr/bin/env python3
# yts

import requests
import bs4
import sys
import os
import subprocess

def print_usage():
    print("Usage:   \"./yts [-s, --search <QUERY>] <movie-name> <year> [<format>]\"\n")
    print("Example: \"./yts the-nun 2018\"              # shows the available formats")
    print("Example: \"./yts the-nun 2018 1080p.WEB\"    # downloads movie in the given format")
    print("Example: \"./yts --search nun\"              # shows results of search query")
    exit()

def handle_args():
    arg_dict = {"name": None, "format": None, "query": None}
    if len(sys.argv) == 3:
        if (sys.argv[1] == "-s" or sys.argv[1] == "--search"):
            arg_dict["query"] = search_movies(sys.argv[2])
        else:
            arg_dict["name"] = get_movie_name()
    elif len(sys.argv) == 4:
        arg_dict["name"] = get_movie_name()
        arg_dict["format"] = get_movie_format()
    else:
        print_usage()
    
    return arg_dict

def get_movie_name():
    return "-".join(sys.argv[1].split()).lower()+"-"+sys.argv[2]

def get_movie_format():
    return sys.argv[3]

def check_format_availability(format, formats):
    return format in formats

def get_movie_page(movie):
    link = "https://yts.lt/movie/"+movie
    res = requests.get(link)
    if res.status_code == requests.codes.ok:
        return res

def extract_movie_data(movie_data):
    movie_title = movie_data.select("img")[0]["alt"].replace("download", "")
    rating = movie_data.select("figcaption > h4[class='rating']")[0].getText()
    return {movie_title: rating}


def search_movies(query):
    link = "https://yts.lt/browse-movies/{}/all/all/0/latest".format(query)
    res = requests.get(link)
    if res.status_code == requests.codes.ok:
        query_dict = {}
        movies_found = bs4.BeautifulSoup(res.text, "lxml").select("section > div[class='row']")[0].select("div[class='browse-movie-wrap col-xs-10 col-sm-4 col-md-5 col-lg-4']")
        for movies in movies_found:
            movie_data = movies.select("a > figure")[0]
            query_dict.update(extract_movie_data(movie_data))
        return query_dict

def extract_formats(movie_page):
    movie_formats = bs4.BeautifulSoup(movie_page.text, "lxml").select("p[class='hidden-xs hidden-sm']")[0].find_all("a")
    links = {}
    for movie_format in movie_formats:
        links[movie_format.getText()] = movie_format["href"]
    return links

def print_formats(formats):
    print("Available In:")
    for key in formats.keys():
        print("\t", key)
 

def get_torrent(movie_name, torrent_link):
    res = requests.get(torrent_link)
    if res.status_code == requests.codes.ok:
        torrent_name = movie_name+".torrent"
        if os.path.isfile(torrent_name):
            print("Torrent file exists")
        else:
            open(torrent_name, "wb").write(res.content)
        
        return torrent_name 

def execute_transmission(torrent_name):
    command = "transmission-gtk {}".format(torrent_name)
    command_list = command.split()
    subprocess.Popen(command_list)

if __name__ == "__main__":
    arg_dict = handle_args()
    movie_name = arg_dict["name"]
    movie_format = arg_dict["format"]
    search_query_res = arg_dict["query"]
    if search_query_res:
        print("Movies Found:")
        for movie, rating in search_query_res.items():
            print("\t{}{}".format(movie, rating))
    else:
        
        if not movie_name:
            exit()
    
        movie_page = get_movie_page(movie_name)
        if not movie_page:
            print("Movie Page does not exist!")    
            exit()

        formats = extract_formats(movie_page)
        if not formats:
            print("Cannot get movie formats")
            exit()
    
        if movie_format:
            if check_format_availability(movie_format, formats):
                torrent_link = formats[movie_format]
                torrent_name = get_torrent(movie_name, torrent_link)
                if not torrent_name:
                    print("Cannot download torrent")
                else:
                    execute_transmission(torrent_name)

            else:
                print("{} format not available for {}".format(movie_format, movie_name))
        else:
            print_formats(formats)
