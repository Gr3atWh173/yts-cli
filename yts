#! /usr/bin/env python3
# yts

import requests
import argparse
import bs4
import sys
import os
import subprocess

# YTS CLASS
class YTS:
    """ provides an API for downloading yts yifi movies. """

    # Initialize with the current yts url
    def __init__(self, yts_url) -> None:
        self.url = yts_url
        self.arguments = self.get_cli_args()

    # Handles CLI arguments
    # Returns a dictionary of the arguments
    # Only one flag is to be applied at a time
    def get_cli_args(self) -> dict:
        parser = argparse.ArgumentParser(prog="yts",
                                         description="Downloads YTS movie torrents.",
                                         allow_abbrev=False)

        # Add available movie formats argument
        parser.add_argument("-f",
                            nargs=2,
                            metavar=("MOVIE", "YEAR"),
                            action="store",
                            help="shows the available movie formats")

        # Add download movie torrent argument
        parser.add_argument("-d",
                            nargs=3,
                            metavar=("MOVIE", "YEAR", "FORMAT"),
                            action="store",
                            help="downloads movie torrent in the given format")

        # Add search movie argument
        parser.add_argument("-s",
                            nargs=1,
                            metavar="MOVIE",
                            action="store",
                            help="search movies in yts")

        # Add popular movies argument
        parser.add_argument("-p",
                            action="store_true",
                            help="shows popular downloads")
        
        # create argument dictionary
        arguments_dict = vars(parser.parse_args())
        flags_applied = self.number_of_flags(arguments_dict)
        
        # create an error and exit
        if flags_applied == 0:
            sys.exit("Error: Check Usage using -h")
        elif flags_applied > 1:
            sys.exit("Error: Only one flag is applicable")

        return arguments_dict

    # Gets the movie name from the arguments
    # Returns a string
    def get_movie_name_for_url(self):
        flag_key = "f" if self.arguments["f"] else "d"
        movie_name = self.arguments[flag_key][0].lower().split()
        movie_year = self.arguments[flag_key][1]
        return "-".join(movie_name) + "-" + movie_year

    # Gets the movie format from the arguments
    # Returns a string
    def get_movie_format(self):
        return self.arguments["d"]

    # Get the movie page
    # Returns a response object
    def get_movie_page(self, movie_name):
        url = self.url+"movie/"+movie_name
        movie_page = self.make_request(url)
        return movie_page

    # Get the movie formats from the movie page
    # Returns a dictionary of formats with their torrent urls
    def extract_formats(self, movie_page) -> dict:
        movie_formats = (
            bs4.BeautifulSoup(movie_page.text, "lxml")
            .select("p[class='hidden-xs hidden-sm']")[0]
            .find_all("a")
        )
        torrent_urls = {}
        for movie_format in movie_formats:
            torrent_urls[movie_format.getText()] = movie_format["href"]
        return torrent_urls

    # Download and save movie torrent file to current folder
    # Returns torrent name
    def get_torrent(self, movie_name, torrent_url):
        res = self.make_request(torrent_url)
        torrent_name = movie_name+".torrent"
        if not os.path.isfile(torrent_name):
            with open(torrent_name, "wb") as torrent_file:
                torrent_file.write(res.content)
        else:
            # Tell user file already exists
            pass
        return torrent_name


    ### UTIL FUNCTIONS ###
    
    # Make sure only one flag is used at a time
    # Returns an int of number of flags
    def number_of_flags(self, arguments_dict) -> int:
        # Convert arguments to 0 if not present or False
        # and to 1 if present or True
        arguments_dict_int = []
        for value in arguments_dict.values():
            if value in (False, None):
                arguments_dict_int.append(0)
            else:
                arguments_dict_int.append(1)

        return sum(arguments_dict_int)

    # Make request to the given url
    # Returns the response object
    # TODO give a user-friendly error
    def make_request(self, url):
        try:
            res = requests.get(url)
            res.raise_for_status()
        except requests.exceptions.RequestException as err:
            print(err)
            sys.exit()

        return res

    # Check if format is present in given formats
    def check_format_availability(format, formats):
        return format in formats


def main():
    yts = YTS("https://yts.mx/")
    print(yts.get_cli_args())

if __name__ == "__main__":
    main()
