#! /usr/bin/env python3
# yts

import requests
import argparse
import bs4
import sys
import os
import subprocess

# YTS CLASS
class YTS:
    """ provides an API for downloading yts yifi movies. """

    # Initialize with the current yts url
    def __init__(self, yts_url) -> None:
        self.url = yts_url

    # Handles CLI arguments
    # Returns a dictionary of the arguments with an error string
    # Only one flag is to be applied at a time
    def get_cli_args(self) -> dict:
        parser = argparse.ArgumentParser(prog="yts",
                                         description="Downloads YTS movie torrents.",
                                         allow_abbrev=False)

        # Add available movie formats argument
        parser.add_argument("-f",
                            nargs=2,
                            metavar=("MOVIE", "YEAR"),
                            action="store",
                            help="shows the available movie formats")

        # Add download movie torrent argument
        parser.add_argument("-d",
                            nargs=3,
                            metavar=("MOVIE", "YEAR", "FORMAT"),
                            action="store",
                            help="downloads movie torrent in the given format")

        # Add search movie argument
        parser.add_argument("-s",
                            nargs=1,
                            metavar="MOVIE",
                            action="store",
                            help="search movies in yts")

        # Add popular movies argument
        parser.add_argument("-p",
                            action="store_true",
                            help="shows popular downloads")
        
        # create argument dictionary
        arguments_dict = vars(parser.parse_args())
        flags_applied = self.number_of_flags(arguments_dict)
        
        # create an error string according to number of flags
        if flags_applied == 0:
            error_string = "Check Usage using -h"
        elif flags_applied > 1:
            error_string = "Only One Flag is applicable"
        else:
            error_string = ""

        # Add error string to arguments dictionary
        arguments_dict["error"] = error_string

        return arguments_dict

    ### UTIL FUNCTIONS ###
    
    # Make sure only one flag is used at a time
    # Return an int of number of flags
    def number_of_flags(self, arguments_dict) -> int:
        # Convert arguments to 0 if not present or False
        # and to 1 if present or True
        arguments_dict_int = []
        for value in arguments_dict.values():
            if value in (False, None):
                arguments_dict_int.append(0)
            else:
                arguments_dict_int.append(1)

        return sum(arguments_dict_int)

    # Make request to the given url
    # Return the response object
    # TODO give a user-friendly error
    def make_request(self, url):
        try:
            res = requests.get(url)
            res.raise_for_status()
        except requests.exceptions.RequestException as err:
            print(err)
            sys.exit()

        return res


def main():
    yts = YTS("https://yts.mx")
    print(yts.get_cli_args())

if __name__ == "__main__":
    main()
